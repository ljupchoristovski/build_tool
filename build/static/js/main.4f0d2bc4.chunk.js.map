{"version":3,"sources":["redux/constants/action-types.js","redux/reducers/index.js","redux/store/index.js","App.js","serviceWorker.js","redux/index.js","redux/actions/index.js","index.js"],"names":["SELECT_NODE","UPDATE_NODE","INSERT_NODE","REMOVE_NODE","initialState","paletteNodes","key","text","color","type","leftArray","topArray","bottomArray","rightArray","portColor","portId","diagramNodes","selectedDiagramNode","rootReducer","state","action","console","log","payload","filter","el","store","createStore","App","connect","useState","selectedNode","setSelectedNode","paramText","setParamText","setparamColor","$","go","make","makeButton","visiblePredicate","click","o","e","diagram","ofObject","nodeMenu","obj","addPort","portSize","model","linkKeyProperty","changeNodeParam","param","selNode","target","value","diagramModel","commit","m","data","nodeDataArray","find","diagramNode","set","side","startTransaction","selection","each","node","i","findPort","toString","name","arr","newportdata","insertArrayItem","commitTransaction","nodeTemplate","locationObjectName","locationSpot","Center","selectionObjectName","contextMenu","parse","makeTwoWay","stringify","row","column","stretch","Fill","fill","stroke","strokeWidth","minSize","margin","textAlign","font","editable","itemTemplate","_side","fromSpot","Left","toSpot","fromLinkable","toLinkable","cursor","desiredSize","Top","Right","Bottom","linkTemplate","routing","Orthogonal","corner","toArrow","toolManager","linkingTool","temporaryLink","addDiagramListener","subject","part","linkFromPortIdProperty","linkToPortIdProperty","linkDataArray","className","initPalette","palette","divClassName","loc","initDiagram","onModelChange","changes","undefined","Object","keys","map","index","TextField","id","onChange","FormControl","Select","labelId","MenuItem","Boolean","window","location","hostname","match","selectNodeDiagram","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f0d2bc4.chunk.js","sourcesContent":["export const SELECT_NODE = \"SELECT_NODE\";\r\nexport const GET_ARTICLES = \"GET_ARTICLES\";\r\nexport const UPDATE_NODE = \"UPDATE_NODE\";\r\nexport const INSERT_NODE = \"INSERT_NODE\";\r\nexport const REMOVE_NODE = \"REMOVE_NODE\";\r\n","import { SELECT_NODE } from \"../constants/action-types\";\r\nimport { GET_ARTICLES } from \"../constants/action-types\";\r\nimport { UPDATE_NODE } from \"../constants/action-types\";\r\nimport { INSERT_NODE } from \"../constants/action-types\";\r\nimport { REMOVE_NODE } from \"../constants/action-types\";\r\n\r\nconst initialState = {\r\n  paletteNodes: [\r\n    {\r\n      key: 0,\r\n      text: \"Alpha\",\r\n      color: \"red\",\r\n      type: \"1\",\r\n      leftArray: [],\r\n      topArray: [],\r\n      bottomArray: [],\r\n      rightArray: []\r\n    },\r\n    {\r\n      key: 1,\r\n      text: \"Beta\",\r\n      color: \"green\",\r\n      type: \"2\",\r\n      leftArray: [{ portColor: \"#fae3d7\", portId: \"left0\" }],\r\n      topArray: [],\r\n      bottomArray: [],\r\n      rightArray: []\r\n    }\r\n  ],\r\n  diagramNodes: [],\r\n  selectedDiagramNode: []\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n  if (action.type === SELECT_NODE) {\r\n    console.log(action.payload);\r\n    return {\r\n      ...state,\r\n      selectedDiagramNode: action.payload\r\n    };\r\n  }\r\n  if (action.type === INSERT_NODE) {\r\n    // return Object.assign({}, state, {\r\n    //   diagramNodes: state.diagramNodes.concat(action.payload)\r\n    // });\r\n    return {\r\n      ...state,\r\n      diagramNodes: action.payload\r\n    };\r\n  }\r\n  if (action.type === REMOVE_NODE) {\r\n    return {\r\n      diagramNodes: state.diagramNodes.filter(\r\n        el => el.key != action.payload.key\r\n      )\r\n    };\r\n  }\r\n  if (action.type === UPDATE_NODE) {\r\n    return {\r\n      ...state,\r\n      diagramNodes: [...state.diagramNodes, action.payload]\r\n    };\r\n  }\r\n  //   if (action.type === GET_ARTICLES) {\r\n  //     return {\r\n  //       articles: articles\r\n  //     };\r\n  //   }\r\n  return state;\r\n}\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React, { useState } from \"react\";\r\n\r\nimport * as go from \"gojs\";\r\nimport { ReactDiagram, ReactPalette } from \"gojs-react\";\r\nimport { connect } from \"react-redux\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport \"./App.css\";\r\n\r\nfunction ConnectApp() {\r\n  const [selectedNode, setSelectedNode] = useState({});\r\n  const [paramText, setParamText] = useState();\r\n  const [paramColor, setparamColor] = useState();\r\n\r\n  const paletteNodes = [\r\n    {\r\n      key: 1,\r\n      text: \"Operator 1\",\r\n      color: \"red\",\r\n      loc: \"0 0\",\r\n      type: \"1\",\r\n      leftArray: [],\r\n      topArray: [],\r\n      bottomArray: [],\r\n      rightArray: []\r\n    },\r\n    {\r\n      key: 2,\r\n      text: \"Operator 2\",\r\n      color: \"green\",\r\n      loc: \"150 0\",\r\n      type: \"2\",\r\n      leftArray: [],\r\n      topArray: [],\r\n      bottomArray: [],\r\n      rightArray: []\r\n    }\r\n  ];\r\n\r\n  const $ = go.GraphObject.make;\r\n\r\n  function makeButton(text, action, visiblePredicate) {\r\n    return $(\r\n      \"ContextMenuButton\",\r\n      $(go.TextBlock, text),\r\n      { click: action },\r\n      visiblePredicate\r\n        ? new go.Binding(\"visible\", \"\", function(o, e) {\r\n            return o.diagram ? visiblePredicate(o, e) : false;\r\n          }).ofObject()\r\n        : {}\r\n    );\r\n  }\r\n\r\n  var nodeMenu = $(\r\n    // context menu for each Node\r\n    \"ContextMenu\",\r\n    makeButton(\"Add top port\", function(e, obj) {\r\n      addPort(\"top\");\r\n    }),\r\n    makeButton(\"Add left port\", function(e, obj) {\r\n      addPort(\"left\");\r\n    }),\r\n    makeButton(\"Add right port\", function(e, obj) {\r\n      addPort(\"right\");\r\n    }),\r\n    makeButton(\"Add bottom port\", function(e, obj) {\r\n      addPort(\"bottom\");\r\n    })\r\n  );\r\n\r\n  var portSize = new go.Size(8, 8);\r\n\r\n  function initPalette() {\r\n    const palette = $(go.Palette, {\r\n      \"undoManager.isEnabled\": true,\r\n      model: $(go.GraphLinksModel, {\r\n        linkKeyProperty: \"key\"\r\n      })\r\n    });\r\n\r\n    palette.nodeTemplate = $(\r\n      go.Node,\r\n      \"Horizontal\",\r\n      $(go.Shape, \"Circle\", {\r\n        fill: \"red\",\r\n        strokeWidth: 2,\r\n        desiredSize: new go.Size(20, 20)\r\n      }),\r\n      $(\r\n        go.TextBlock,\r\n        {\r\n          stroke: \"#333333\",\r\n          font: \"bold 14px sans-serif\"\r\n        },\r\n        new go.Binding(\"text\", \"text\")\r\n      )\r\n    );\r\n    return palette;\r\n  }\r\n\r\n  const diagram = $(go.Diagram, {\r\n    \"undoManager.isEnabled\": true,\r\n    model: $(go.GraphLinksModel, {\r\n      linkKeyProperty: \"key\"\r\n    })\r\n  });\r\n\r\n  diagram.nodeTemplate = $(\r\n    go.Node,\r\n    \"Table\",\r\n    {\r\n      locationObjectName: \"BODY\",\r\n      locationSpot: go.Spot.Center,\r\n      selectionObjectName: \"BODY\",\r\n      contextMenu: nodeMenu\r\n    },\r\n    new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n      go.Point.stringify\r\n    ),\r\n    $(\r\n      go.Panel,\r\n      \"Auto\",\r\n      {\r\n        row: 1,\r\n        column: 1,\r\n        name: \"BODY\",\r\n        stretch: go.GraphObject.Fill\r\n      },\r\n      $(\r\n        go.Shape,\r\n        \"Rectangle\",\r\n        {\r\n          fill: \"#dbf6cb\",\r\n          stroke: null,\r\n          strokeWidth: 0,\r\n          minSize: new go.Size(150, 120)\r\n        },\r\n        new go.Binding(\"fill\", \"color\")\r\n      ),\r\n      $(\r\n        go.TextBlock,\r\n        {\r\n          margin: 10,\r\n          textAlign: \"center\",\r\n          font: \"bold 14px Segoe UI,sans-serif\",\r\n          stroke: \"#484848\",\r\n          editable: true\r\n        },\r\n        new go.Binding(\"text\", \"text\").makeTwoWay()\r\n      )\r\n    ),\r\n    $(go.Panel, \"Vertical\", new go.Binding(\"itemArray\", \"leftArray\"), {\r\n      row: 1,\r\n      column: 0,\r\n      itemTemplate: $(\r\n        go.Panel,\r\n        {\r\n          _side: \"left\",\r\n          fromSpot: go.Spot.Left,\r\n          toSpot: go.Spot.Left,\r\n          fromLinkable: true,\r\n          toLinkable: true,\r\n          cursor: \"pointer\"\r\n        },\r\n        new go.Binding(\"portId\", \"portId\"),\r\n        $(\r\n          go.Shape,\r\n          \"Rectangle\",\r\n          {\r\n            stroke: null,\r\n            strokeWidth: 0,\r\n            desiredSize: portSize,\r\n            margin: new go.Margin(1, 0)\r\n          },\r\n          new go.Binding(\"fill\", \"portColor\")\r\n        )\r\n      )\r\n    }),\r\n    $(go.Panel, \"Horizontal\", new go.Binding(\"itemArray\", \"topArray\"), {\r\n      row: 0,\r\n      column: 1,\r\n      itemTemplate: $(\r\n        go.Panel,\r\n        {\r\n          _side: \"top\",\r\n          fromSpot: go.Spot.Top,\r\n          toSpot: go.Spot.Top,\r\n          fromLinkable: true,\r\n          toLinkable: true,\r\n          cursor: \"pointer\"\r\n        },\r\n        new go.Binding(\"portId\", \"portId\"),\r\n        $(\r\n          go.Shape,\r\n          \"Rectangle\",\r\n          {\r\n            stroke: null,\r\n            strokeWidth: 0,\r\n            desiredSize: portSize,\r\n            margin: new go.Margin(0, 1)\r\n          },\r\n          new go.Binding(\"fill\", \"portColor\")\r\n        )\r\n      )\r\n    }),\r\n    $(go.Panel, \"Vertical\", new go.Binding(\"itemArray\", \"rightArray\"), {\r\n      row: 1,\r\n      column: 2,\r\n      itemTemplate: $(\r\n        go.Panel,\r\n        {\r\n          _side: \"right\",\r\n          fromSpot: go.Spot.Right,\r\n          toSpot: go.Spot.Right,\r\n          fromLinkable: true,\r\n          toLinkable: true,\r\n          cursor: \"pointer\"\r\n        },\r\n        new go.Binding(\"portId\", \"portId\"),\r\n        $(\r\n          go.Shape,\r\n          \"Rectangle\",\r\n          {\r\n            stroke: null,\r\n            strokeWidth: 0,\r\n            desiredSize: portSize,\r\n            margin: new go.Margin(1, 0)\r\n          },\r\n          new go.Binding(\"fill\", \"portColor\")\r\n        )\r\n      )\r\n    }),\r\n    $(go.Panel, \"Horizontal\", new go.Binding(\"itemArray\", \"bottomArray\"), {\r\n      row: 2,\r\n      column: 1,\r\n      itemTemplate: $(\r\n        go.Panel,\r\n        {\r\n          _side: \"bottom\",\r\n          fromSpot: go.Spot.Bottom,\r\n          toSpot: go.Spot.Bottom,\r\n          fromLinkable: true,\r\n          toLinkable: true,\r\n          cursor: \"pointer\"\r\n        },\r\n        new go.Binding(\"portId\", \"portId\"),\r\n        $(\r\n          go.Shape,\r\n          \"Rectangle\",\r\n          {\r\n            stroke: null,\r\n            strokeWidth: 0,\r\n            desiredSize: portSize,\r\n            margin: new go.Margin(0, 1)\r\n          },\r\n          new go.Binding(\"fill\", \"portColor\")\r\n        )\r\n      )\r\n    })\r\n  );\r\n\r\n  diagram.linkTemplate = $(\r\n    go.Link,\r\n    { routing: go.Link.Orthogonal, corner: 3 },\r\n    $(go.Shape),\r\n    $(go.Shape, { toArrow: \"Standard\" })\r\n  );\r\n\r\n  diagram.toolManager.linkingTool.temporaryLink.routing = go.Link.Orthogonal;\r\n\r\n  diagram.addDiagramListener(\"ObjectSingleClicked\", function(e) {\r\n    setSelectedNode({});\r\n    e &&\r\n      e.subject &&\r\n      e.subject.part &&\r\n      e.subject.part.data &&\r\n      setSelectedNode({\r\n        diagramModel: diagram.model,\r\n        diagramNode: e.subject.part.data\r\n      });\r\n  });\r\n\r\n  diagram.addDiagramListener(\"BackgroundSingleClicked\", function(e) {\r\n    setSelectedNode({});\r\n  });\r\n\r\n  diagram.addDiagramListener(\"BackgroundDoubleClicked\", function(e) {\r\n    setSelectedNode({});\r\n  });\r\n\r\n  diagram.model = $(go.GraphLinksModel, {\r\n    linkFromPortIdProperty: \"fromPort\",\r\n    linkToPortIdProperty: \"toPort\",\r\n    nodeDataArray: [],\r\n    linkDataArray: []\r\n  });\r\n\r\n  function handleModelChange(changes) {}\r\n\r\n  function changeNodeParam(param, e, selNode) {\r\n    param === \"text\"\r\n      ? setParamText(e.target.value)\r\n      : setparamColor(e.target.value);\r\n    selNode.diagramModel.commit(function(m) {\r\n      var data = m.nodeDataArray.find(el => el.key == selNode.diagramNode.key);\r\n      m.set(data, param, e.target.value);\r\n    });\r\n  }\r\n\r\n  function addPort(side) {\r\n    diagram.startTransaction(\"addPort\");\r\n    diagram.selection.each(function(node) {\r\n      if (!(node instanceof go.Node)) return;\r\n      var i = 0;\r\n      while (node.findPort(side + i.toString()) !== node) i++;\r\n      var name = side + i.toString();\r\n      var arr = node.data[side + \"Array\"];\r\n      if (arr) {\r\n        var newportdata = {\r\n          portId: name,\r\n          portColor: \"black\"\r\n        };\r\n        diagram.model.insertArrayItem(arr, -1, newportdata);\r\n      }\r\n    });\r\n    diagram.commitTransaction(\"addPort\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ReactPalette\r\n        initPalette={initPalette}\r\n        divClassName=\"palette-component\"\r\n        nodeDataArray={paletteNodes}\r\n      />\r\n      <ReactDiagram\r\n        initDiagram={() => diagram}\r\n        divClassName=\"diagram-component\"\r\n        onModelChange={handleModelChange}\r\n      />\r\n      <div className=\"parameter-component\">\r\n        {selectedNode &&\r\n          selectedNode.diagramNode &&\r\n          selectedNode.diagramNode !== undefined &&\r\n          Object.keys(selectedNode.diagramNode).map((el, index) => {\r\n            return (\r\n              <div\r\n                className=\"grid-container\"\r\n                key={selectedNode.diagramNode[\"key\"] + index}\r\n              >\r\n                {selectedNode.diagramNode[el] &&\r\n                  (el === \"key\" || el === \"text\" || el === \"color\") && (\r\n                    <>\r\n                      {el === \"key\" && (\r\n                        <>\r\n                          <div className=\"grid-item\">ID:</div>\r\n                          <div className=\"grid-item\">\r\n                            {selectedNode.diagramNode[el]}\r\n                          </div>\r\n                        </>\r\n                      )}\r\n                      {el === \"text\" && (\r\n                        <>\r\n                          <div className=\"grid-item\">Name: </div>\r\n                          <div className=\"grid-item\">\r\n                            <TextField\r\n                              id=\"standard-basic\"\r\n                              // label=\"Text\"\r\n                              value={\r\n                                paramText !== \"\"\r\n                                  ? selectedNode.diagramNode[el]\r\n                                  : paramText\r\n                              }\r\n                              onChange={e =>\r\n                                changeNodeParam(\"text\", e, selectedNode)\r\n                              }\r\n                            />\r\n                          </div>\r\n                        </>\r\n                      )}\r\n                      {el === \"color\" && (\r\n                        <>\r\n                          <div className=\"grid-item\">{el}:</div>\r\n                          <div className=\"grid-item\">\r\n                            <FormControl className=\"form\">\r\n                              <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                id={\"demo-simple-select\" + index}\r\n                                value={selectedNode.diagramNode[el]}\r\n                                onChange={e =>\r\n                                  changeNodeParam(\"color\", e, selectedNode)\r\n                                }\r\n                              >\r\n                                <MenuItem value={\"red\"}>{\"red\"}</MenuItem>\r\n                                <MenuItem value={\"green\"}>{\"green\"}</MenuItem>\r\n                                <MenuItem value={\"blue\"}>{\"blue\"}</MenuItem>\r\n                              </Select>\r\n                            </FormControl>\r\n                          </div>\r\n                        </>\r\n                      )}\r\n                    </>\r\n                  )}\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    // paletteNodes: state.paletteNodes,\r\n    // selectedDiagramNode: state.selectedDiagramNode\r\n    // diagramNodes: state.diagramNodes\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  // insertDiagramNode,\r\n  // removeDiagramNode,\r\n  // selectNodeDiagram\r\n  // getArticles,\r\n  // updateNode\r\n};\r\n\r\nconst App = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ConnectApp);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import store from \"../redux/store/index\";\r\nimport { selectNodeDiagram } from \"../redux/actions/index\";\r\n\r\nwindow.store = store;\r\nwindow.selectNodeDiagram = selectNodeDiagram;\r\n","import { SELECT_NODE } from \"../constants/action-types\";\r\nimport { GET_ARTICLES } from \"../constants/action-types\";\r\nimport { UPDATE_NODE } from \"../constants/action-types\";\r\nimport { INSERT_NODE } from \"../constants/action-types\";\r\nimport { REMOVE_NODE } from \"../constants/action-types\";\r\n\r\nexport function selectNodeDiagram(payload) {\r\n  return { type: SELECT_NODE, payload };\r\n}\r\n\r\nexport function insertDiagramNode(payload) {\r\n  return { type: INSERT_NODE, payload };\r\n}\r\n\r\nexport function removeDiagramNode(payload) {\r\n  return { type: REMOVE_NODE, payload };\r\n}\r\n\r\nexport function getArticles() {\r\n  return { type: GET_ARTICLES };\r\n}\r\n\r\nexport function updateNode(payload) {\r\n  return { type: UPDATE_NODE, payload };\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store/index\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport index from \"./redux/index\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}